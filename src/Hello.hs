module Hello where

import Core (SKI, i, k, s)
import List (listToCh')
import Nat (ChurchNumeral', decodeEnum, encodeEnum, encodeEnum', extract)

-- TODO write about other operators too
hello :: SKI ((((b1 -> b1) -> b1 -> b1) -> b2 -> b2) -> b2 -> b2)
hello =
  listToCh' $
    map encodeEnum' "Hello, World!\n"

helloNrs :: [Integer]
helloNrs =
  map
    (decodeEnum . encodeEnum)
    "Hello, World!\n"

printExcl :: IO ()
printExcl =
  s
    (s i (k (s (k (>>)) (s (k putChar) (s (s i (k succ)) (k (toEnum 0)))))))
    (k (return ()))
    ( s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))))))))))))))))))))))))))))))) (k i)
    )

printHelloWorld :: IO ()
printHelloWorld =
  s
    (s i (k (s (k (>>)) (s (k putChar) (s (s i (k succ)) (k (toEnum 0)))))))
    (k (return ()))
    -- Reduced before
    (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k (s (s (k s) k) (s (s (k s) k) (k i)))) (s i (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))))) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (s (k s) k) (s i (k (s (s (k s) k) (s i (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (s (k s) k) (s (s (k s) k) (k i)))))) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))) (s i (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))) (s i (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (s (k s) k) (s i (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))))) (s (s (k s) k) (s (s (k s) k) (k i)))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))) (s (s (k s) k) (s (s (k s) k) (s i (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (s (k s) k) (s (s (k s) k) (k i))))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s i (k (s (s (k s) k) (s (s (k s) k) (k i)))) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (s (k s) k) (s (s (k s) k) (s i (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (s (k s) k) (s i (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))))) (s (s (k s) k) (s (s (k s) k) (k i)))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (s (k s) k) (s (s (k s) k) (s i (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))))) (s (s (k s) k) (s (s (k s) k) (k i))))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))) (s i (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s i (k (s (s (k s) k) (s i (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (s (k s) k) (s (s (k s) k) (k i)))))) (s (s (k s) k) (s (s (k s) k) (k i)))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (s (k s) k) (s i (k (s (s (k s) k) (s (s (k s) k) (k i)))) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (s (k s) k) (s i (k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (s (k s) k) (s (s (k s) k) (k i))))) (k i)))))))))))))))

-- (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k s) k (s (s (k s) k) (s (s (k s) k) (k i))) (s (k (s i)) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))))) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (s (k s) k) (s (k (s i)) k (s (s (k s) k) (s (k (s i)) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k s) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (k (s i)) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k s) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (k (s i)) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k s) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))) (s (s (k s) k) (s (k (s i)) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))))) (s (s (k s) k) (s (s (k s) k) (k i)))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k s) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (s (k s) k) (s (s (k s) k) (s (k (s i)) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))) (s (s (k s) k) (s (s (k s) k) (k i))))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k (s i)) k (s (s (k s) k) (s (s (k s) k) (k i))) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k s) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))) (s (s (k s) k) (s (s (k s) k) (s (k (s i)) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k s) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))) (s (s (k s) k) (s (k (s i)) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))))) (s (s (k s) k) (s (s (k s) k) (k i)))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k s) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))) (s (s (k s) k) (s (s (k s) k) (s (k (s i)) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))))) (s (s (k s) k) (s (s (k s) k) (k i))))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k s) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (k (s i)) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (k (s i)) k (s (s (k s) k) (s (k (s i)) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))) (s (s (k s) k) (s (s (k s) k) (k i))))) (s (s (k s) k) (s (s (k s) k) (k i)))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (s (k s) k) (s (k (s i)) k (s (s (k s) k) (s (s (k s) k) (k i))) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))))))) (s (k s) (s (k (s (k s))) (s (k (s (k k))) (s (k (s i)) k))) (s (s (k s) k) (s (k (s i)) k (s (s (k s) k) (s (s (k s) k) (s (s (k s) k) (k i)))) (s (s (k s) k) (s (s (k s) k) (k i))))) (k i)))))))))))))))

helloEfficient :: SKI ((ChurchNumeral' Integer -> a -> a) -> a -> a)
helloEfficient = listToCh' $ extract . fromIntegral . fromEnum <$> "Hello, World!\n"
